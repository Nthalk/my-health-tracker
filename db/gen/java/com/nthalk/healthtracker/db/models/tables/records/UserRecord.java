/*
 * This file is generated by jOOQ.
 */
package com.nthalk.healthtracker.db.models.tables.records;


import com.nthalk.healthtracker.db.models.tables.User;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends UpdatableRecordImpl<UserRecord> implements Record5<Long, Float, Float, String, OffsetDateTime> {

    private static final long serialVersionUID = 1739343269;

    /**
     * Setter for <code>USER.user_id</code>.
     */
    public void setUserId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>USER.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>USER.normal_min_temperature</code>.
     */
    public void setNormalMinTemperature(Float value) {
        set(1, value);
    }

    /**
     * Getter for <code>USER.normal_min_temperature</code>.
     */
    public Float getNormalMinTemperature() {
        return (Float) get(1);
    }

    /**
     * Setter for <code>USER.normal_max_temperature</code>.
     */
    public void setNormalMaxTemperature(Float value) {
        set(2, value);
    }

    /**
     * Getter for <code>USER.normal_max_temperature</code>.
     */
    public Float getNormalMaxTemperature() {
        return (Float) get(2);
    }

    /**
     * Setter for <code>USER.default_temperature_unit</code>.
     */
    public void setDefaultTemperatureUnit(String value) {
        set(3, value);
    }

    /**
     * Getter for <code>USER.default_temperature_unit</code>.
     */
    public String getDefaultTemperatureUnit() {
        return (String) get(3);
    }

    /**
     * Setter for <code>USER.created_at</code>.
     */
    public void setCreatedAt(OffsetDateTime value) {
        set(4, value);
    }

    /**
     * Getter for <code>USER.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Float, Float, String, OffsetDateTime> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, Float, Float, String, OffsetDateTime> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return User.USER.USER_ID;
    }

    @Override
    public Field<Float> field2() {
        return User.USER.NORMAL_MIN_TEMPERATURE;
    }

    @Override
    public Field<Float> field3() {
        return User.USER.NORMAL_MAX_TEMPERATURE;
    }

    @Override
    public Field<String> field4() {
        return User.USER.DEFAULT_TEMPERATURE_UNIT;
    }

    @Override
    public Field<OffsetDateTime> field5() {
        return User.USER.CREATED_AT;
    }

    @Override
    public Long component1() {
        return getUserId();
    }

    @Override
    public Float component2() {
        return getNormalMinTemperature();
    }

    @Override
    public Float component3() {
        return getNormalMaxTemperature();
    }

    @Override
    public String component4() {
        return getDefaultTemperatureUnit();
    }

    @Override
    public OffsetDateTime component5() {
        return getCreatedAt();
    }

    @Override
    public Long value1() {
        return getUserId();
    }

    @Override
    public Float value2() {
        return getNormalMinTemperature();
    }

    @Override
    public Float value3() {
        return getNormalMaxTemperature();
    }

    @Override
    public String value4() {
        return getDefaultTemperatureUnit();
    }

    @Override
    public OffsetDateTime value5() {
        return getCreatedAt();
    }

    @Override
    public UserRecord value1(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserRecord value2(Float value) {
        setNormalMinTemperature(value);
        return this;
    }

    @Override
    public UserRecord value3(Float value) {
        setNormalMaxTemperature(value);
        return this;
    }

    @Override
    public UserRecord value4(String value) {
        setDefaultTemperatureUnit(value);
        return this;
    }

    @Override
    public UserRecord value5(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public UserRecord values(Long value1, Float value2, Float value3, String value4, OffsetDateTime value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(Long userId, Float normalMinTemperature, Float normalMaxTemperature, String defaultTemperatureUnit, OffsetDateTime createdAt) {
        super(User.USER);

        set(0, userId);
        set(1, normalMinTemperature);
        set(2, normalMaxTemperature);
        set(3, defaultTemperatureUnit);
        set(4, createdAt);
    }
}
