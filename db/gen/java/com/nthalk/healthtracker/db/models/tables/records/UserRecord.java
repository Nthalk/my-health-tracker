/*
 * This file is generated by jOOQ.
 */
package com.nthalk.healthtracker.db.models.tables.records;


import com.nthalk.healthtracker.db.models.tables.User;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserRecord extends UpdatableRecordImpl<UserRecord> implements Record3<Long, Float, Float> {

    private static final long serialVersionUID = 198973815;

    /**
     * Setter for <code>USER.user_id</code>.
     */
    public void setUserId(Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>USER.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>USER.normal_min_temperature</code>.
     */
    public void setNormalMinTemperature(Float value) {
        set(1, value);
    }

    /**
     * Getter for <code>USER.normal_min_temperature</code>.
     */
    public Float getNormalMinTemperature() {
        return (Float) get(1);
    }

    /**
     * Setter for <code>USER.normal_max_temperature</code>.
     */
    public void setNormalMaxTemperature(Float value) {
        set(2, value);
    }

    /**
     * Getter for <code>USER.normal_max_temperature</code>.
     */
    public Float getNormalMaxTemperature() {
        return (Float) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Float, Float> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<Long, Float, Float> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return User.USER.USER_ID;
    }

    @Override
    public Field<Float> field2() {
        return User.USER.NORMAL_MIN_TEMPERATURE;
    }

    @Override
    public Field<Float> field3() {
        return User.USER.NORMAL_MAX_TEMPERATURE;
    }

    @Override
    public Long component1() {
        return getUserId();
    }

    @Override
    public Float component2() {
        return getNormalMinTemperature();
    }

    @Override
    public Float component3() {
        return getNormalMaxTemperature();
    }

    @Override
    public Long value1() {
        return getUserId();
    }

    @Override
    public Float value2() {
        return getNormalMinTemperature();
    }

    @Override
    public Float value3() {
        return getNormalMaxTemperature();
    }

    @Override
    public UserRecord value1(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserRecord value2(Float value) {
        setNormalMinTemperature(value);
        return this;
    }

    @Override
    public UserRecord value3(Float value) {
        setNormalMaxTemperature(value);
        return this;
    }

    @Override
    public UserRecord values(Long value1, Float value2, Float value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserRecord
     */
    public UserRecord() {
        super(User.USER);
    }

    /**
     * Create a detached, initialised UserRecord
     */
    public UserRecord(Long userId, Float normalMinTemperature, Float normalMaxTemperature) {
        super(User.USER);

        set(0, userId);
        set(1, normalMinTemperature);
        set(2, normalMaxTemperature);
    }
}
