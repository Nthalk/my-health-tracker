/*
 * This file is generated by jOOQ.
 */
package com.nthalk.healthtracker.db.models.tables;


import com.nthalk.healthtracker.db.models.DefaultSchema;
import com.nthalk.healthtracker.db.models.Keys;
import com.nthalk.healthtracker.db.models.tables.records.UserTokenRecord;

import java.time.OffsetDateTime;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserToken extends TableImpl<UserTokenRecord> {

    private static final long serialVersionUID = -1672898437;

    /**
     * The reference instance of <code>user_token</code>
     */
    public static final UserToken USER_TOKEN = new UserToken();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserTokenRecord> getRecordType() {
        return UserTokenRecord.class;
    }

    /**
     * The column <code>user_token.token</code>.
     */
    public final TableField<UserTokenRecord, String> TOKEN = createField(DSL.name("token"), org.jooq.impl.SQLDataType.VARCHAR.nullable(false), this, "");

    /**
     * The column <code>user_token.user_id</code>.
     */
    public final TableField<UserTokenRecord, Long> USER_ID = createField(DSL.name("user_id"), org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * The column <code>user_token.created_at</code>.
     */
    public final TableField<UserTokenRecord, OffsetDateTime> CREATED_AT = createField(DSL.name("created_at"), org.jooq.impl.SQLDataType.TIMESTAMPWITHTIMEZONE.nullable(false), this, "");

    /**
     * Create a <code>user_token</code> table reference
     */
    public UserToken() {
        this(DSL.name("user_token"), null);
    }

    /**
     * Create an aliased <code>user_token</code> table reference
     */
    public UserToken(String alias) {
        this(DSL.name(alias), USER_TOKEN);
    }

    /**
     * Create an aliased <code>user_token</code> table reference
     */
    public UserToken(Name alias) {
        this(alias, USER_TOKEN);
    }

    private UserToken(Name alias, Table<UserTokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserToken(Name alias, Table<UserTokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    public <O extends Record> UserToken(Table<O> child, ForeignKey<O, UserTokenRecord> key) {
        super(child, key, USER_TOKEN);
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public UniqueKey<UserTokenRecord> getPrimaryKey() {
        return Keys.USER_TOKEN_PKEY;
    }

    @Override
    public List<UniqueKey<UserTokenRecord>> getKeys() {
        return Arrays.<UniqueKey<UserTokenRecord>>asList(Keys.USER_TOKEN_PKEY);
    }

    @Override
    public List<ForeignKey<UserTokenRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<UserTokenRecord, ?>>asList(Keys.USER_TOKEN__USER_TOKEN_USER_ID_FKEY);
    }

    public User user() {
        return new User(this, Keys.USER_TOKEN__USER_TOKEN_USER_ID_FKEY);
    }

    @Override
    public UserToken as(String alias) {
        return new UserToken(DSL.name(alias), this);
    }

    @Override
    public UserToken as(Name alias) {
        return new UserToken(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserToken rename(String name) {
        return new UserToken(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserToken rename(Name name) {
        return new UserToken(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Long, OffsetDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
