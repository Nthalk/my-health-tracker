/*
 * This file is generated by jOOQ.
 */
package com.nthalk.healthtracker.db.models.tables.records;


import com.nthalk.healthtracker.db.models.tables.UserToken;

import java.time.OffsetDateTime;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserTokenRecord extends UpdatableRecordImpl<UserTokenRecord> implements Record3<String, Long, OffsetDateTime> {

    private static final long serialVersionUID = 1710850404;

    /**
     * Setter for <code>user_token.token</code>.
     */
    public void setToken(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>user_token.token</code>.
     */
    public String getToken() {
        return (String) get(0);
    }

    /**
     * Setter for <code>user_token.user_id</code>.
     */
    public void setUserId(Long value) {
        set(1, value);
    }

    /**
     * Getter for <code>user_token.user_id</code>.
     */
    public Long getUserId() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>user_token.created_at</code>.
     */
    public void setCreatedAt(OffsetDateTime value) {
        set(2, value);
    }

    /**
     * Getter for <code>user_token.created_at</code>.
     */
    public OffsetDateTime getCreatedAt() {
        return (OffsetDateTime) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row3<String, Long, OffsetDateTime> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    public Row3<String, Long, OffsetDateTime> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    public Field<String> field1() {
        return UserToken.USER_TOKEN.TOKEN;
    }

    @Override
    public Field<Long> field2() {
        return UserToken.USER_TOKEN.USER_ID;
    }

    @Override
    public Field<OffsetDateTime> field3() {
        return UserToken.USER_TOKEN.CREATED_AT;
    }

    @Override
    public String component1() {
        return getToken();
    }

    @Override
    public Long component2() {
        return getUserId();
    }

    @Override
    public OffsetDateTime component3() {
        return getCreatedAt();
    }

    @Override
    public String value1() {
        return getToken();
    }

    @Override
    public Long value2() {
        return getUserId();
    }

    @Override
    public OffsetDateTime value3() {
        return getCreatedAt();
    }

    @Override
    public UserTokenRecord value1(String value) {
        setToken(value);
        return this;
    }

    @Override
    public UserTokenRecord value2(Long value) {
        setUserId(value);
        return this;
    }

    @Override
    public UserTokenRecord value3(OffsetDateTime value) {
        setCreatedAt(value);
        return this;
    }

    @Override
    public UserTokenRecord values(String value1, Long value2, OffsetDateTime value3) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached UserTokenRecord
     */
    public UserTokenRecord() {
        super(UserToken.USER_TOKEN);
    }

    /**
     * Create a detached, initialised UserTokenRecord
     */
    public UserTokenRecord(String token, Long userId, OffsetDateTime createdAt) {
        super(UserToken.USER_TOKEN);

        set(0, token);
        set(1, userId);
        set(2, createdAt);
    }
}
